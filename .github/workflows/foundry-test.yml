name: foundry-test

on:
  workflow_call:
    inputs:
      ref:
        default: ${{ github.ref }}
        type: string
        required: false
      mode:
        default: "ALL"
        type: "string"
      zksync:
        default: false
        type: boolean
      ROOT_DIR:
        description: "The root folder to look for tests"
        default: "src"
        type: "string"
    secrets:
      RPC_MAINNET:
        required: false
      RPC_POLYGON:
        required: false
      RPC_AVALANCHE:
        required: false
      RPC_OPTIMISM:
        required: false
      RPC_ARBITRUM:
        required: false
      RPC_METIS:
        required: false
      RPC_BASE:
        required: false
      RPC_GNOSIS:
        required: false
      RPC_BNB:
        required: false
      RPC_ZKEVM:
        required: false
      RPC_SCROLL:
        required: false
      RPC_ZKSYNC:
        required: false
      COMMENT_PAT:
        required: false
      READ_ONLY_PAT:
        required: false
        description: "If supplied PAT will be used for git checkout"

jobs:
  test:
    name: Foundry build n test
    runs-on: ubuntu-latest
    env:
      FOUNDRY_PROFILE: ci
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{ inputs.ref }}
          token: ${{ secrets.READ_ONLY_PAT || github.token }}

      # download is unnecessary, but done to prevent errors with parallel jobs
      - uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: content
          path: /tmp/content
          run-id: ${{ github.event.workflow_run.id }}

      - name: Setup env
        uses: bgd-labs/github-workflows/.github/actions/env@main
        with:
          RPC_MAINNET: ${{secrets.RPC_MAINNET}}
          RPC_POLYGON: ${{secrets.RPC_POLYGON}}
          RPC_AVALANCHE: ${{secrets.RPC_AVALANCHE}}
          RPC_OPTIMISM: ${{secrets.RPC_OPTIMISM}}
          RPC_ARBITRUM: ${{secrets.RPC_ARBITRUM}}
          RPC_METIS: ${{secrets.RPC_METIS}}
          RPC_BASE: ${{secrets.RPC_BASE}}
          RPC_GNOSIS: ${{secrets.RPC_GNOSIS}}
          RPC_BNB: ${{secrets.RPC_BNB}}
          RPC_ZKEVM: ${{secrets.RPC_ZKEVM}}
          RPC_SCROLL: ${{secrets.RPC_SCROLL}}
          RPC_ZKSYNC: ${{secrets.RPC_ZKSYNC}}

      - name: Install Foundry
        if: ${{ !inputs.zksync }}
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install Foundry zksync
        if: ${{ inputs.zksync }}
        uses: bgd-labs/foundry-zksync-toolchain@340cea9a42119d9a77a6bb0a8236d4311582b709
        with:
          version: nightly

      - uses: bgd-labs/github-workflows/.github/actions/setup-node@main

      - name: Run Forge build
        run: |
          forge --version | sed -r 's/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g' | tee /tmp/foundry_version ; test ${PIPESTATUS[0]} -eq 0
          forge cache ls
          ${{ inputs.zksync && 'FOUNDRY_PROFILE=zksync' || '' }} forge build --sizes ${{ inputs.zksync && '--zksync' || ''}} | sed -r 's/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g' | tee /tmp/foundry_build ; test ${PIPESTATUS[0]} -eq 0
        id: build

      - name: Run Forge tests
        uses: bgd-labs/github-workflows/.github/actions/foundry-test@main
        with:
          MODE: ${{ inputs.mode }}
          ROOT_DIR: ${{ inputs.ROOT_DIR }}
          ZKSYNC: ${{ inputs.zksync }}

      - name: Make empty dir
        run: mkdir -p /tmp/content

      - name: Create comment body
        id: get-comment-body
        run: |
          printf "Foundry report\n\n" > /tmp/content/content${{ inputs.zksync && '_zksync' || '' }}.txt
          printf "\`\`\`shell\n$(cat /tmp/foundry_version)\n\`\`\`\n\n" >> /tmp/content/content${{ inputs.zksync && '_zksync' || '' }}.txt
          printf "<details><summary>Build log</summary>\n\n\`\`\`shell\n$(cat /tmp/foundry_build)\n\`\`\`\n</details>\n\n" >> /tmp/content/content${{ inputs.zksync && '_zksync' || '' }}.txt
          printf "<details><summary>Test ${{ env.testStatus == 0 && 'success :rainbow:' || 'error :finnadie::x:'}}</summary>\n\n\`\`\`shell\n$(cat /tmp/foundry_test)\n\`\`\`\n</details>\n\n" >> /tmp/content/content${{ inputs.zksync && '_zksync' || '' }}.txt

      - name: Run Gas report
        if: ${{ inputs.mode == 'ALL'}}
        uses: bgd-labs/github-workflows/.github/actions/foundry-gas-report@main

      - name: Save PR number
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          mkdir -p ./pr
          echo $PR_NUMBER > /tmp/content/pr_number.txt

      - uses: actions/upload-artifact@v4
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        with:
          name: content
          path: /tmp/content
          # overwrite as we sometimes run this job multiple times (once for zksync, once for the rest)
          overwrite: true

      # we let failing tests pass so we can log them in the comment, still we want the ci to fail
      - name: Post test
        if: ${{ env.testStatus != 0 }}
        run: |
          echo "tests failed"
          exit 1
