name: foundry-test

on:
  workflow_call:
    inputs:
      ref:
        default: ${{ github.ref }}
        type: string
        required: false
      mode:
        default: "ALL"
        type: "string"
    secrets:
      RPC_MAINNET:
        required: false
      RPC_POLYGON:
        required: false
      RPC_AVALANCHE:
        required: false
      RPC_OPTIMISM:
        required: false
      RPC_ARBITRUM:
        required: false
      RPC_METIS:
        required: false
      RPC_BASE:
        required: false
      COMMENT_PAT:
        required: false

jobs:
  test:
    name: Foundry build n test
    runs-on: ubuntu-latest
    env:
      FOUNDRY_PROFILE: ci
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Setup env
        uses: bgd-labs/github-workflows/.github/actions/env@main
        with:
          RPC_MAINNET: ${{secrets.RPC_MAINNET}}
          RPC_POLYGON: ${{secrets.RPC_POLYGON}}
          RPC_AVALANCHE: ${{secrets.RPC_AVALANCHE}}
          RPC_OPTIMISM: ${{secrets.RPC_OPTIMISM}}
          RPC_ARBITRUM: ${{secrets.RPC_ARBITRUM}}
          RPC_METIS: ${{secrets.RPC_METIS}}
          RPC_BASE: ${{secrets.RPC_BASE}}

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run Forge build
        run: |
          forge --version | sed -r 's/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g' | tee /tmp/foundry_version ; test ${PIPESTATUS[0]} -eq 0
          forge cache ls
          forge build --sizes | sed -r 's/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g' | tee /tmp/foundry_build ; test ${PIPESTATUS[0]} -eq 0
        id: build

      - name: Run Forge tests
        uses: bgd-labs/github-workflows/.github/actions/foundry-test@main
        with:
          MODE: ${{ inputs.mode }}

      - name: Create comment body
        id: get-comment-body
        run: |
          printf "Foundry report\n\n" > /tmp/template.md
          printf "\`\`\`shell\n$(cat /tmp/foundry_version)\n\`\`\`\n\n" >> /tmp/template.md
          printf "<details><summary>Build log</summary>\n\n\`\`\`shell\n$(cat /tmp/foundry_build)\n\`\`\`\n</details>\n\n" >> /tmp/template.md
          printf "<details><summary>Test ${{ env.testStatus == 0 && 'success :rainbow:' || 'error :finnadie::x:'}}</summary>\n\n\`\`\`shell\n$(cat /tmp/foundry_test)\n\`\`\`\n</details>\n\n" >> /tmp/template.md

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.pull_request.head.sha || github.sha }}
          path: /tmp/template.md

      - name: Save PR number
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          mkdir -p ./pr
          echo $PR_NUMBER > ./pr/pr_number.txt

      - uses: actions/upload-artifact@v3
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
        with:
          name: pr_number
          path: pr/pr_number.txt

      # we let failing tests pass so we can log them in the comment, still we want the ci to fail
      - name: Post test
        if: ${{ env.testStatus != 0 }}
        run: |
          echo "tests failed"
          exit 1
